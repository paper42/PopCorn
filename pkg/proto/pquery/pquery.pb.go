// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pquery.proto

/*
Package pquery is a generated protocol buffer package.

It is generated from these files:
	pquery.proto

It has these top-level messages:
	DateRange
	PkgStatQuery
	PkgVersion
	PkgDay
	PackageStats
*/
package pquery

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DateRange struct {
	StartTime        *int64  `protobuf:"varint,1,opt,name=StartTime" json:"StartTime,omitempty"`
	EndTime          *int64  `protobuf:"varint,2,opt,name=EndTime" json:"EndTime,omitempty"`
	Duration         *string `protobuf:"bytes,3,opt,name=Duration" json:"Duration,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DateRange) Reset()                    { *m = DateRange{} }
func (m *DateRange) String() string            { return proto.CompactTextString(m) }
func (*DateRange) ProtoMessage()               {}
func (*DateRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DateRange) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *DateRange) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *DateRange) GetDuration() string {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return ""
}

type PkgStatQuery struct {
	PkgName          *string    `protobuf:"bytes,1,req,name=PkgName" json:"PkgName,omitempty"`
	Interval         *DateRange `protobuf:"bytes,2,opt,name=Interval" json:"Interval,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *PkgStatQuery) Reset()                    { *m = PkgStatQuery{} }
func (m *PkgStatQuery) String() string            { return proto.CompactTextString(m) }
func (*PkgStatQuery) ProtoMessage()               {}
func (*PkgStatQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PkgStatQuery) GetPkgName() string {
	if m != nil && m.PkgName != nil {
		return *m.PkgName
	}
	return ""
}

func (m *PkgStatQuery) GetInterval() *DateRange {
	if m != nil {
		return m.Interval
	}
	return nil
}

type PkgVersion struct {
	Version          *string `protobuf:"bytes,1,req,name=Version" json:"Version,omitempty"`
	Installs         *int32  `protobuf:"varint,2,req,name=Installs" json:"Installs,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PkgVersion) Reset()                    { *m = PkgVersion{} }
func (m *PkgVersion) String() string            { return proto.CompactTextString(m) }
func (*PkgVersion) ProtoMessage()               {}
func (*PkgVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PkgVersion) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *PkgVersion) GetInstalls() int32 {
	if m != nil && m.Installs != nil {
		return *m.Installs
	}
	return 0
}

type PkgDay struct {
	Date             *string       `protobuf:"bytes,1,req,name=Date" json:"Date,omitempty"`
	Versions         []*PkgVersion `protobuf:"bytes,2,rep,name=Versions" json:"Versions,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PkgDay) Reset()                    { *m = PkgDay{} }
func (m *PkgDay) String() string            { return proto.CompactTextString(m) }
func (*PkgDay) ProtoMessage()               {}
func (*PkgDay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PkgDay) GetDate() string {
	if m != nil && m.Date != nil {
		return *m.Date
	}
	return ""
}

func (m *PkgDay) GetVersions() []*PkgVersion {
	if m != nil {
		return m.Versions
	}
	return nil
}

type PackageStats struct {
	Installs         *int32    `protobuf:"varint,1,req,name=Installs" json:"Installs,omitempty"`
	Versions         []string  `protobuf:"bytes,2,rep,name=Versions" json:"Versions,omitempty"`
	CalendarStats    []*PkgDay `protobuf:"bytes,3,rep,name=CalendarStats" json:"CalendarStats,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *PackageStats) Reset()                    { *m = PackageStats{} }
func (m *PackageStats) String() string            { return proto.CompactTextString(m) }
func (*PackageStats) ProtoMessage()               {}
func (*PackageStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PackageStats) GetInstalls() int32 {
	if m != nil && m.Installs != nil {
		return *m.Installs
	}
	return 0
}

func (m *PackageStats) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *PackageStats) GetCalendarStats() []*PkgDay {
	if m != nil {
		return m.CalendarStats
	}
	return nil
}

func init() {
	proto.RegisterType((*DateRange)(nil), "DateRange")
	proto.RegisterType((*PkgStatQuery)(nil), "PkgStatQuery")
	proto.RegisterType((*PkgVersion)(nil), "PkgVersion")
	proto.RegisterType((*PkgDay)(nil), "PkgDay")
	proto.RegisterType((*PackageStats)(nil), "PackageStats")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PQuery service

type PQueryClient interface {
	GetPackageStats(ctx context.Context, in *PkgStatQuery, opts ...grpc.CallOption) (*PackageStats, error)
}

type pQueryClient struct {
	cc *grpc.ClientConn
}

func NewPQueryClient(cc *grpc.ClientConn) PQueryClient {
	return &pQueryClient{cc}
}

func (c *pQueryClient) GetPackageStats(ctx context.Context, in *PkgStatQuery, opts ...grpc.CallOption) (*PackageStats, error) {
	out := new(PackageStats)
	err := grpc.Invoke(ctx, "/PQuery/GetPackageStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PQuery service

type PQueryServer interface {
	GetPackageStats(context.Context, *PkgStatQuery) (*PackageStats, error)
}

func RegisterPQueryServer(s *grpc.Server, srv PQueryServer) {
	s.RegisterService(&_PQuery_serviceDesc, srv)
}

func _PQuery_GetPackageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkgStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PQueryServer).GetPackageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PQuery/GetPackageStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PQueryServer).GetPackageStats(ctx, req.(*PkgStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _PQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PQuery",
	HandlerType: (*PQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPackageStats",
			Handler:    _PQuery_GetPackageStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pquery.proto",
}

func init() { proto.RegisterFile("pquery.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0x80, 0x6d, 0xab, 0xdb, 0xfa, 0xb6, 0x21, 0xe4, 0x54, 0x86, 0x87, 0x91, 0x83, 0xf6, 0x62,
	0xc0, 0x5d, 0xbd, 0x69, 0x87, 0x78, 0x91, 0x98, 0x89, 0x57, 0x79, 0xb8, 0x10, 0x4a, 0x6b, 0x3a,
	0xd3, 0x54, 0xd8, 0x7f, 0x2f, 0xc9, 0xfa, 0x63, 0xbd, 0xe5, 0xf5, 0x23, 0xdf, 0xf7, 0x1a, 0x58,
	0x1c, 0x7e, 0x1b, 0x69, 0x8e, 0xec, 0x60, 0x2a, 0x5b, 0xd1, 0x2f, 0x88, 0x33, 0xb4, 0x52, 0xa0,
	0x56, 0x92, 0xdc, 0x40, 0xbc, 0xb3, 0x68, 0xec, 0x47, 0xfe, 0x23, 0x93, 0x60, 0x1d, 0xa4, 0x91,
	0x18, 0x3e, 0x90, 0x04, 0xa6, 0x5b, 0xbd, 0xf7, 0x2c, 0xf4, 0xac, 0x1b, 0xc9, 0x0a, 0x66, 0x59,
	0x63, 0xd0, 0xe6, 0x95, 0x4e, 0xa2, 0x75, 0x90, 0xc6, 0xa2, 0x9f, 0x29, 0x87, 0x05, 0x2f, 0xd4,
	0xce, 0xa2, 0x7d, 0x77, 0x59, 0x67, 0xe1, 0x85, 0x7a, 0x43, 0x5f, 0x08, 0xd3, 0x58, 0x74, 0x23,
	0xb9, 0x85, 0xd9, 0xab, 0xb6, 0xd2, 0xfc, 0x61, 0xe9, 0x03, 0xf3, 0x0d, 0xb0, 0x7e, 0x37, 0xd1,
	0x33, 0xfa, 0x04, 0xc0, 0x0b, 0xf5, 0x29, 0x4d, 0x9d, 0x57, 0xda, 0xf9, 0xda, 0x63, 0xe7, 0xeb,
	0xc8, 0xca, 0xf9, 0x6a, 0x8b, 0x65, 0x59, 0x27, 0xe1, 0x3a, 0x4c, 0xaf, 0x44, 0x3f, 0xd3, 0x2d,
	0x4c, 0x78, 0xa1, 0x32, 0x3c, 0x12, 0x02, 0x97, 0x2e, 0xd2, 0x5e, 0xf6, 0x67, 0x72, 0x07, 0xb3,
	0x56, 0xe2, 0x6e, 0x46, 0xe9, 0x7c, 0x33, 0x67, 0x43, 0x52, 0xf4, 0x90, 0x36, 0xb0, 0xe0, 0xf8,
	0x5d, 0xa0, 0x92, 0xee, 0x07, 0xeb, 0x51, 0x32, 0x18, 0x27, 0x1d, 0x1b, 0x49, 0xe3, 0xc1, 0x43,
	0xee, 0x61, 0xf9, 0x8c, 0xa5, 0xd4, 0x7b, 0x34, 0x5e, 0x94, 0x44, 0xbe, 0x3a, 0x65, 0xa7, 0x25,
	0xc5, 0x98, 0x6e, 0x1e, 0x61, 0xc2, 0x4f, 0xaf, 0xf9, 0x00, 0xd7, 0x2f, 0xd2, 0x8e, 0x76, 0x58,
	0xb2, 0xf3, 0xf7, 0x5e, 0x2d, 0xd9, 0x39, 0xa5, 0x17, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64,
	0x90, 0xe2, 0x3f, 0x00, 0x02, 0x00, 0x00,
}
